// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prefetch.proto

#include "prefetch.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace prefetch {
PROTOBUF_CONSTEXPR PrefetchRequest::PrefetchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subsysnqn_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pba_)*/uint64_t{0u}
  , /*decltype(_impl_.ns_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrefetchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrefetchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrefetchRequestDefaultTypeInternal() {}
  union {
    PrefetchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrefetchRequestDefaultTypeInternal _PrefetchRequest_default_instance_;
PROTOBUF_CONSTEXPR PrefetchReply::PrefetchReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrefetchReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrefetchReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrefetchReplyDefaultTypeInternal() {}
  union {
    PrefetchReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrefetchReplyDefaultTypeInternal _PrefetchReply_default_instance_;
}  // namespace prefetch
static ::_pb::Metadata file_level_metadata_prefetch_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_prefetch_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_prefetch_2eproto = nullptr;

const uint32_t TableStruct_prefetch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::prefetch::PrefetchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::prefetch::PrefetchRequest, _impl_.subsysnqn_),
  PROTOBUF_FIELD_OFFSET(::prefetch::PrefetchRequest, _impl_.ns_id_),
  PROTOBUF_FIELD_OFFSET(::prefetch::PrefetchRequest, _impl_.pba_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::prefetch::PrefetchReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::prefetch::PrefetchReply, _impl_.success_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::prefetch::PrefetchRequest)},
  { 9, -1, -1, sizeof(::prefetch::PrefetchReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::prefetch::_PrefetchRequest_default_instance_._instance,
  &::prefetch::_PrefetchReply_default_instance_._instance,
};

const char descriptor_table_protodef_prefetch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016prefetch.proto\022\010prefetch\"@\n\017PrefetchRe"
  "quest\022\021\n\tsubsysnqn\030\001 \001(\t\022\r\n\005ns_id\030\002 \001(\r\022"
  "\013\n\003pba\030\003 \001(\004\" \n\rPrefetchReply\022\017\n\007success"
  "\030\001 \001(\0102R\n\nPrefetcher\022D\n\014PrefetchData\022\031.p"
  "refetch.PrefetchRequest\032\027.prefetch.Prefe"
  "tchReply\"\000B2\n\031io.grpc.examples.prefetchB"
  "\rPrefetchProtoP\001\242\002\003HLWb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_prefetch_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_prefetch_2eproto = {
    false, false, 270, descriptor_table_protodef_prefetch_2eproto,
    "prefetch.proto",
    &descriptor_table_prefetch_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_prefetch_2eproto::offsets,
    file_level_metadata_prefetch_2eproto, file_level_enum_descriptors_prefetch_2eproto,
    file_level_service_descriptors_prefetch_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_prefetch_2eproto_getter() {
  return &descriptor_table_prefetch_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_prefetch_2eproto(&descriptor_table_prefetch_2eproto);
namespace prefetch {

// ===================================================================

class PrefetchRequest::_Internal {
 public:
};

PrefetchRequest::PrefetchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:prefetch.PrefetchRequest)
}
PrefetchRequest::PrefetchRequest(const PrefetchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrefetchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subsysnqn_){}
    , decltype(_impl_.pba_){}
    , decltype(_impl_.ns_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subsysnqn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subsysnqn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subsysnqn().empty()) {
    _this->_impl_.subsysnqn_.Set(from._internal_subsysnqn(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pba_, &from._impl_.pba_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ns_id_) -
    reinterpret_cast<char*>(&_impl_.pba_)) + sizeof(_impl_.ns_id_));
  // @@protoc_insertion_point(copy_constructor:prefetch.PrefetchRequest)
}

inline void PrefetchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subsysnqn_){}
    , decltype(_impl_.pba_){uint64_t{0u}}
    , decltype(_impl_.ns_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subsysnqn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subsysnqn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrefetchRequest::~PrefetchRequest() {
  // @@protoc_insertion_point(destructor:prefetch.PrefetchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrefetchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subsysnqn_.Destroy();
}

void PrefetchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrefetchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:prefetch.PrefetchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subsysnqn_.ClearToEmpty();
  ::memset(&_impl_.pba_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ns_id_) -
      reinterpret_cast<char*>(&_impl_.pba_)) + sizeof(_impl_.ns_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrefetchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subsysnqn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subsysnqn();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "prefetch.PrefetchRequest.subsysnqn"));
        } else
          goto handle_unusual;
        continue;
      // uint32 ns_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ns_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pba = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pba_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrefetchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prefetch.PrefetchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subsysnqn = 1;
  if (!this->_internal_subsysnqn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subsysnqn().data(), static_cast<int>(this->_internal_subsysnqn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "prefetch.PrefetchRequest.subsysnqn");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subsysnqn(), target);
  }

  // uint32 ns_id = 2;
  if (this->_internal_ns_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ns_id(), target);
  }

  // uint64 pba = 3;
  if (this->_internal_pba() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pba(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prefetch.PrefetchRequest)
  return target;
}

size_t PrefetchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prefetch.PrefetchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subsysnqn = 1;
  if (!this->_internal_subsysnqn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subsysnqn());
  }

  // uint64 pba = 3;
  if (this->_internal_pba() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pba());
  }

  // uint32 ns_id = 2;
  if (this->_internal_ns_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ns_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrefetchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrefetchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrefetchRequest::GetClassData() const { return &_class_data_; }


void PrefetchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrefetchRequest*>(&to_msg);
  auto& from = static_cast<const PrefetchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prefetch.PrefetchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subsysnqn().empty()) {
    _this->_internal_set_subsysnqn(from._internal_subsysnqn());
  }
  if (from._internal_pba() != 0) {
    _this->_internal_set_pba(from._internal_pba());
  }
  if (from._internal_ns_id() != 0) {
    _this->_internal_set_ns_id(from._internal_ns_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrefetchRequest::CopyFrom(const PrefetchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prefetch.PrefetchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrefetchRequest::IsInitialized() const {
  return true;
}

void PrefetchRequest::InternalSwap(PrefetchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subsysnqn_, lhs_arena,
      &other->_impl_.subsysnqn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrefetchRequest, _impl_.ns_id_)
      + sizeof(PrefetchRequest::_impl_.ns_id_)
      - PROTOBUF_FIELD_OFFSET(PrefetchRequest, _impl_.pba_)>(
          reinterpret_cast<char*>(&_impl_.pba_),
          reinterpret_cast<char*>(&other->_impl_.pba_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrefetchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_prefetch_2eproto_getter, &descriptor_table_prefetch_2eproto_once,
      file_level_metadata_prefetch_2eproto[0]);
}

// ===================================================================

class PrefetchReply::_Internal {
 public:
};

PrefetchReply::PrefetchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:prefetch.PrefetchReply)
}
PrefetchReply::PrefetchReply(const PrefetchReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrefetchReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:prefetch.PrefetchReply)
}

inline void PrefetchReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PrefetchReply::~PrefetchReply() {
  // @@protoc_insertion_point(destructor:prefetch.PrefetchReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrefetchReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PrefetchReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrefetchReply::Clear() {
// @@protoc_insertion_point(message_clear_start:prefetch.PrefetchReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrefetchReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrefetchReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prefetch.PrefetchReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prefetch.PrefetchReply)
  return target;
}

size_t PrefetchReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prefetch.PrefetchReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrefetchReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrefetchReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrefetchReply::GetClassData() const { return &_class_data_; }


void PrefetchReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrefetchReply*>(&to_msg);
  auto& from = static_cast<const PrefetchReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prefetch.PrefetchReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrefetchReply::CopyFrom(const PrefetchReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prefetch.PrefetchReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrefetchReply::IsInitialized() const {
  return true;
}

void PrefetchReply::InternalSwap(PrefetchReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrefetchReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_prefetch_2eproto_getter, &descriptor_table_prefetch_2eproto_once,
      file_level_metadata_prefetch_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prefetch
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::prefetch::PrefetchRequest*
Arena::CreateMaybeMessage< ::prefetch::PrefetchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prefetch::PrefetchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::prefetch::PrefetchReply*
Arena::CreateMaybeMessage< ::prefetch::PrefetchReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prefetch::PrefetchReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
